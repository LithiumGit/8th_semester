Rect2_js_exec_counter[0]++;
function Rect2(p1, p2) {
  Rect2_js_exec_counter[2]++;
  Rect2_js_exec_counter[4]++;
  this.min = new Vec2(p1.x, p1.y);
  Rect2_js_exec_counter[5]++;
  this.max = p2 === undefined ? new Vec2(p1.x, p1.y) : new Vec2(p2.x, p2.y);
  Rect2_js_exec_counter[6]++;
  this.extent = new Vec2();
  Rect2_js_exec_counter[7]++;
  this.center = new Vec2();
  Rect2_js_exec_counter[8]++;
  this.hyp = 0;
  Rect2_js_exec_counter[9]++;
  this.updateExtent();
  Rect2_js_exec_counter[3]++;
}
Rect2_js_exec_counter[10]++;
Rect2.prototype = {draw: function() {
  Rect2_js_exec_counter[11]++;
  Rect2_js_exec_counter[13]++;
  g.rect(this.min.x, this.min.y, this.extent.x, this.extent.y);
  Rect2_js_exec_counter[12]++;
}, enclose: function(x, y) {
  Rect2_js_exec_counter[14]++;
  if (x < this.min.x) {
    Rect2_js_exec_counter[16]++;
    this.min.x = x;
  }
  if (y < this.min.y) {
    Rect2_js_exec_counter[17]++;
    this.min.y = y;
  }
  if (x > this.max.x) {
    Rect2_js_exec_counter[18]++;
    this.max.x = x;
  }
  if (y > this.max.y) {
    Rect2_js_exec_counter[19]++;
    this.max.y = y;
  }
  Rect2_js_exec_counter[15]++;
}, contains: function(x, y) {
  Rect2_js_exec_counter[20]++;
  Rect2_js_exec_counter[21]++;
  return x > this.min.x && x < this.max.x && y > this.min.y && y < this.max.y;
}, containsRect: function(rect) {
  Rect2_js_exec_counter[22]++;
  Rect2_js_exec_counter[23]++;
  return (rect.min.x > this.min.x && rect.min.x < this.max.x && rect.min.y > this.min.y && rect.min.y < this.max.y && rect.max.x > this.min.x && rect.max.x < this.max.x && rect.max.y > this.min.y && rect.max.y < this.max.y);
}, updateExtent: function() {
  Rect2_js_exec_counter[24]++;
  Rect2_js_exec_counter[26]++;
  this.extent.set(this.max.x - this.min.x, this.max.y - this.min.y);
  Rect2_js_exec_counter[27]++;
  this.center.set(this.min.x + this.extent.x / 2, this.min.y + this.extent.y / 2);
  Rect2_js_exec_counter[28]++;
  this.hyp = Vec2.mag(this.extent);
  Rect2_js_exec_counter[25]++;
}, transform: function(origin, mv, sc) {
  Rect2_js_exec_counter[29]++;
  Rect2_js_exec_counter[31]++;
  this.min.transform(origin, mv, sc);
  Rect2_js_exec_counter[32]++;
  this.max.transform(origin, mv, sc);
  Rect2_js_exec_counter[33]++;
  this.center.transform(origin, mv, sc);
  Rect2_js_exec_counter[34]++;
  this.extent.mul2(sc);
  Rect2_js_exec_counter[35]++;
  this.hyp *= sc;
  Rect2_js_exec_counter[30]++;
}};
Rect2_js_exec_counter[36]++;
Rect2.intersects = function(r1, r2) {
  Rect2_js_exec_counter[37]++;
  Rect2_js_exec_counter[38]++;
  return r1.min.x < r2.max.x && r1.max.x > r2.min.x && r1.min.y < r2.max.y && r1.max.y > r2.min.y;
};
Rect2_js_exec_counter[1]++;
