#link: https://github.com/SonarSource/SonarTS
    1.no-commented-code
    2.no-identical-functions/no-duplicate-function
    3.use-primitive-type
    no-dead-store
    no-gratuitous-expressions
    Parameters should be passed in the correct order (arguments-order)
    Optional boolean parameters should have default value (bool-param-default)
    Cognitive Complexity of functions should not be too high (cognitive-complexity)
    Method overloads should be grouped together (consecutive-overloads)
    "switch" statements should not have too many "case" clauses (max-switch-cases)
    Union types should not have too many elements (max-union-size)
    Functions should not be too complex (mccabe-complexity)
    Getters and setters should access the expected fields (no-accessor-field-mismatch) (requires type-check)
    A compare function should be provided when using "Array.prototype.sort()" (no-alphabetical-sort)
    delete should not be used on arrays (no-array-delete) (requires type-check)
    Functions should not have too many lines of code (no-big-function)
    Collapsible "if" statements should be merged (no-collapsible-if)
    Sections of code should not be "commented out" (no-commented-code)
    Dead stores should be removed (no-dead-store) (requires type-check)
    Union and intersection types should not be defined with duplicated elements (no-duplicate-in-composite)
    String literals should not be duplicated (no-duplicate-string)
    Two branches in a conditional structure should not have exactly the same implementation (no-duplicated-branches)
    Nested blocks of code should not be left empty (no-empty-nested-blocks)
    Extra semicolons should be removed (no-extra-semicolon)
    Conditions should not always evaluate to "true" or to "false" (no-gratuitous-expressions)
    Credentials should not be hard-coded (no-hardcoded-credentials)
    Functions should not have identical implementations (no-identical-functions)
    Functions should use "return" consistently (no-inconsistent-return)
    "await" should only be used with promises (no-invalid-await)
    Function returns should not be invariant (no-invariant-return)
    Boolean checks should not be inverted (no-inverted-boolean-check)
    Multiline string literals should not be used (no-multiline-string-literals)
    Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression (no-nested-incdec)
    "switch" statements should not be nested (no-nested-switch)
    Template literals should not be nested (no-nested-template-literals)
    Boolean literals should not be redundant (no-redundant-boolean)
    Jump statements should not be redundant (no-redundant-jump)
    Redundant pairs of parentheses should be removed (no-redundant-parentheses)
    Primitive return types should be used (no-return-type-any) (requires type-check)
    Conditionals should start on new lines (no-same-line-conditional)
    "switch" statements should have at least 3 "case" clauses (no-small-switch)
    Statements should be on separate lines (no-statements-same-line)
    Loops with at most one iteration should be refactored (no-unconditional-jump)
    "undefined" should not be passed as the value of optional parameters (no-undefined-argument)
    Multiline blocks should be enclosed in curly braces (no-unenclosed-multiline-block)
    Array contents should be used (no-unused-array) (requires type-check)
    Redundant casts and not-null assertions should be avoided (no-useless-cast) (requires type-check)
    "catch" clauses should do more than rethrow (no-useless-catch)
    Variables should be declared before they are used (no-variable-usage-before-declaration) (requires type-check)
    Functions should not have too many parameters (parameters-max-number)
    "default" clauses should be last (prefer-default-last)
    Local variables should not be declared and then immediately returned or thrown (prefer-immediate-return) (requires type-check)
    Optional property declarations should use '?' syntax (prefer-optional)
    Shorthand promises should be used (prefer-promise-shorthand)
    Type guards should be used (prefer-type-guard)
    Wrapper objects should not be used for primitive types (use-primitive-type) (requires type-check)
    Type aliases should be used (use-type-alias) (requires type-check)