#link: https://github.com/SonarSource/SonarTS
    1.no-commented-code
    2.no-identical-functions/no-duplicate-function
    3.use-primitive-type
    4.no-dead-store
    5.no-gratuitous-expressions
    6.Parameters should be passed in the correct order (arguments-order)
    7.Optional boolean parameters should have default value (bool-param-default)
    8.Cognitive Complexity of functions should not be too high (cognitive-complexity)
    9.Method overloads should be grouped together (consecutive-overloads)
    10."switch" statements should not have too many "case" clauses (max-switch-cases)
    11.Union types should not have too many elements (max-union-size)
    12.Functions should not be too complex (mccabe-complexity)
    13.Getters and setters should access the expected fields (no-accessor-field-mismatch) (requires type-check)
    14.A compare function should be provided when using "Array.prototype.sort()" (no-alphabetical-sort)
    15.delete should not be used on arrays (no-array-delete) (requires type-check)
    16.Functions should not have too many lines of code (no-big-function)
    17.Collapsible "if" statements should be merged (no-collapsible-if)
    18.Sections of code should not be "commented out" (no-commented-code)
    19.Dead stores should be removed (no-dead-store) (requires type-check)
    20.Union and intersection types should not be defined with duplicated elements (no-duplicate-in-composite)
    21.String literals should not be duplicated (no-duplicate-string)
    22.Two branches in a conditional structure should not have exactly the same implementation (no-duplicated-branches)
    23.Nested blocks of code should not be left empty (no-empty-nested-blocks)
    24.Extra semicolons should be removed (no-extra-semicolon)
    25.Conditions should not always evaluate to "true" or to "false" (no-gratuitous-expressions)
    26.Credentials should not be hard-coded (no-hardcoded-credentials)
    27.Functions should not have identical implementations (no-identical-functions)
    28.Functions should use "return" consistently (no-inconsistent-return)
    29."await" should only be used with promises (no-invalid-await)
    30.Function returns should not be invariant (no-invariant-return)
    31.Boolean checks should not be inverted (no-inverted-boolean-check)
    32.Multiline string literals should not be used (no-multiline-string-literals)
    33.Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression (no-nested-incdec)
    34."switch" statements should not be nested (no-nested-switch)
    35.Template literals should not be nested (no-nested-template-literals)
    36.Boolean literals should not be redundant (no-redundant-boolean)
    37.Jump statements should not be redundant (no-redundant-jump)
    38.Redundant pairs of parentheses should be removed (no-redundant-parentheses)
    39.Primitive return types should be used (no-return-type-any) (requires type-check)
    40.Conditionals should start on new lines (no-same-line-conditional)
    41."switch" statements should have at least 3 "case" clauses (no-small-switch)
    42.Statements should be on separate lines (no-statements-same-line)
    43.Loops with at most one iteration should be refactored (no-unconditional-jump)
    44."undefined" should not be passed as the value of optional parameters (no-undefined-argument)
    45.Multiline blocks should be enclosed in curly braces (no-unenclosed-multiline-block)
    46.Array contents should be used (no-unused-array) (requires type-check)
    47.Redundant casts and not-null assertions should be avoided (no-useless-cast) (requires type-check)
    48."catch" clauses should do more than rethrow (no-useless-catch)
    49.Variables should be declared before they are used (no-variable-usage-before-declaration) (requires type-check)
    50.Functions should not have too many parameters (parameters-max-number)
    51."default" clauses should be last (prefer-default-last)
    52.Local variables should not be declared and then immediately returned or thrown (prefer-immediate-return) (requires type-check)
    53.Optional property declarations should use '?' syntax (prefer-optional)
    54.Shorthand promises should be used (prefer-promise-shorthand)
    55.Type guards should be used (prefer-type-guard)
    56.Wrapper objects should not be used for primitive types (use-primitive-type) (requires type-check)
    57.Type aliases should be used (use-type-alias) (requires type-check)



    ----------------------filtered from java--------------------

    #link:https://dzone.com/articles/smells-in-java-code-do-you-recognize-them
    1.Constant Interface
    2.Global Variable Class
    3.Global Function Class
    4.Publicly Exposed Fields
    5.Orphan Abstract
    6.Forgotten Interface
    7.Lonely Class
    8.Abstract Leaf
    9.Tagged Class